// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: payments.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "payments";

/** Request messages */
export interface UserForSubscribe {
  id: string;
  email: string;
  name: string;
}

export interface CreateSubscribeRequest {
  user: UserForSubscribe | undefined;
  productKey: number;
}

export interface GetSubscribesQuery {
  sortBy: string;
  sortDirection: string;
  pageNumber: number;
  pageSize: number;
  userId: string;
}

export interface UnSubscribeRequest {
  userId: string;
  paymentId: string;
}

export interface WebhookRequest {
  buffer: Uint8Array;
  signature: string;
}

export interface GetSubscribesGqlQuery {
  sortBy: string;
  sortDirection: string;
  offset: number;
  limit: number;
  userId: string;
}

export interface CreateSubscribeResponse {
  url: string;
  status: string;
}

export interface Payment {
  id: string;
  userId: string;
  subscriptionId: string;
  createdAt: string;
  expiresAt: string;
  deletedAt: string | undefined;
  payType: string;
  subType: string;
  status: string;
  amount: number;
}

export interface PaymentsGqlResponse {
  items: Payment[];
  pageNumber: number;
  pageSize: number;
  totalCount: number;
}

export interface PaymentsResponse {
  items: Payment[];
  pageNumber: number;
  pageSize: number;
  totalCount: number;
}

export interface UnSubscribeResponse {
  status: string;
}

export interface WebhookResponse {
  status: string;
}

export const PAYMENTS_PACKAGE_NAME = "payments";

export interface PaymentsServiceClient {
  createSubscribe(request: CreateSubscribeRequest, metadata?: Metadata): Observable<CreateSubscribeResponse>;

  getSubscribes(request: GetSubscribesQuery, metadata?: Metadata): Observable<PaymentsResponse>;

  getSubscribesGql(request: GetSubscribesGqlQuery, metadata?: Metadata): Observable<PaymentsGqlResponse>;

  unSubscribe(request: UnSubscribeRequest, metadata?: Metadata): Observable<UnSubscribeResponse>;

  webhook(request: WebhookRequest, metadata?: Metadata): Observable<WebhookResponse>;
}

export interface PaymentsServiceController {
  createSubscribe(
    request: CreateSubscribeRequest,
    metadata?: Metadata,
  ): Promise<CreateSubscribeResponse> | Observable<CreateSubscribeResponse> | CreateSubscribeResponse;

  getSubscribes(
    request: GetSubscribesQuery,
    metadata?: Metadata,
  ): Promise<PaymentsResponse> | Observable<PaymentsResponse> | PaymentsResponse;

  getSubscribesGql(
    request: GetSubscribesGqlQuery,
    metadata?: Metadata,
  ): Promise<PaymentsGqlResponse> | Observable<PaymentsGqlResponse> | PaymentsGqlResponse;

  unSubscribe(
    request: UnSubscribeRequest,
    metadata?: Metadata,
  ): Promise<UnSubscribeResponse> | Observable<UnSubscribeResponse> | UnSubscribeResponse;

  webhook(
    request: WebhookRequest,
    metadata?: Metadata,
  ): Promise<WebhookResponse> | Observable<WebhookResponse> | WebhookResponse;
}

export function PaymentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createSubscribe", "getSubscribes", "getSubscribesGql", "unSubscribe", "webhook"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENTS_SERVICE_NAME = "PaymentsService";
