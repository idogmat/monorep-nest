// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: content.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "content";

export enum PhotoUploadStatus {
  PENDING = 0,
  IN_PROGRESS = 1,
  COMPLETED = 2,
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export interface Url {
  id: string;
  createdAt: string;
  deletedAt: string;
  updatedAt: string;
  fileName: string;
  fileUrl: string;
  postId: string;
}

export interface Comment {
  id: string;
  createdAt: string;
  deletedAt: string;
  updatedAt: string;
  message: string;
  postId: string;
  userId: string;
}

export interface GetPostsQueryRequest {
  sortBy: string;
  sortDirection: string;
  pageNumber: number;
  pageSize: number;
  userId: string;
}

export interface GetPostRequest {
  postId: string;
}

/** ----------- */
export interface GetPostResponse {
  id: string;
  userId: string;
  createdAt: string;
  updatedAt: string;
  deletedAt: string;
  title: string;
  published: boolean;
  banned: boolean;
  photoUploadStatus: string;
  urls: Url[];
  /**
   * photoUploadStatus PhotoUploadStatus   @default(PENDING)  // Статус загрузки фотографий
   * comments Comment[] @relation("PostComment")
   * likes Like[] @relation("PostLike")
   */
  comments: Comment[];
}

export interface CreateCommentRequest {
  userId: string;
  postId: string;
  message: string;
}

export interface CreateCommentResponse {
  success: string;
  message: string;
}

export interface GetPostsResponse {
  items: GetPostResponse[];
  pageNumber: number;
  pageSize: number;
  totalCount: number;
}

export interface CreatePostRequest {
  userId: string;
  description: string;
  photoUploadStatus: PhotoUploadStatus;
}

export interface PostResponse {
  id: string;
}

export const CONTENT_PACKAGE_NAME = "content";

export interface PostServiceClient {
  createPost(request: CreatePostRequest, metadata?: Metadata): Observable<PostResponse>;

  getPost(request: GetPostRequest, metadata?: Metadata): Observable<GetPostResponse>;

  getPosts(request: GetPostsQueryRequest, metadata?: Metadata): Observable<GetPostsResponse>;
}

export interface PostServiceController {
  createPost(
    request: CreatePostRequest,
    metadata?: Metadata,
  ): Promise<PostResponse> | Observable<PostResponse> | PostResponse;

  getPost(
    request: GetPostRequest,
    metadata?: Metadata,
  ): Promise<GetPostResponse> | Observable<GetPostResponse> | GetPostResponse;

  getPosts(
    request: GetPostsQueryRequest,
    metadata?: Metadata,
  ): Promise<GetPostsResponse> | Observable<GetPostsResponse> | GetPostsResponse;
}

export function PostServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createPost", "getPost", "getPosts"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PostService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const POST_SERVICE_NAME = "PostService";

export interface CommentServiceClient {
  createComment(request: CreateCommentRequest, metadata?: Metadata): Observable<CreateCommentResponse>;
}

export interface CommentServiceController {
  createComment(
    request: CreateCommentRequest,
    metadata?: Metadata,
  ): Promise<CreateCommentResponse> | Observable<CreateCommentResponse> | CreateCommentResponse;
}

export function CommentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createComment"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CommentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CommentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const COMMENT_SERVICE_NAME = "CommentService";
