// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: profile.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "profile";

/** Request messages */
export interface UserProfileRequest {
  userId: string;
  profileUserId: string;
}

export interface UserProfilesResponse {
  profiles: UserProfileResponse[];
}

export interface UserProfileResponse {
  id: string;
  userId: string;
  userName: string;
  /** Обёртка для пустых значений */
  photoUrl:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  firstName:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  lastName:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  dateOfBirth:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  country:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  city:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  aboutMe: string | undefined;
  followed: boolean;
  subscribers: number;
  subscriptions: number;
}

export interface UpdateUserProfileRequest {
  userId: string;
  userName: string;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  country: string;
  city: string;
  aboutMe: string;
}

export const PROFILE_PACKAGE_NAME = "profile";

export interface ProfileServiceClient {
  getUserProfile(request: UserProfileRequest, metadata?: Metadata): Observable<UserProfileResponse>;

  getUserProfiles(request: UserProfileRequest, metadata?: Metadata): Observable<UserProfilesResponse>;

  updateUserProfile(request: UpdateUserProfileRequest, metadata?: Metadata): Observable<UserProfilesResponse>;
}

export interface ProfileServiceController {
  getUserProfile(
    request: UserProfileRequest,
    metadata?: Metadata,
  ): Promise<UserProfileResponse> | Observable<UserProfileResponse> | UserProfileResponse;

  getUserProfiles(
    request: UserProfileRequest,
    metadata?: Metadata,
  ): Promise<UserProfilesResponse> | Observable<UserProfilesResponse> | UserProfilesResponse;

  updateUserProfile(
    request: UpdateUserProfileRequest,
    metadata?: Metadata,
  ): Promise<UserProfilesResponse> | Observable<UserProfilesResponse> | UserProfilesResponse;
}

export function ProfileServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUserProfile", "getUserProfiles", "updateUserProfile"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProfileService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProfileService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROFILE_SERVICE_NAME = "ProfileService";
