// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: profile.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "profile";

/** Request messages */
export interface UserProfileRequest {
  userId: string;
  profileUserId: string;
}

export interface UserProfileUpdateSubscribeRequest {
  userId: string;
  paymentAccount: boolean;
}

export interface UserProfilesGQLRequest {
  users: string[];
}

export interface UserProfilesQuery {
  sortBy: string;
  sortDirection: string;
  pageNumber: number;
  pageSize: number;
  userName: string;
}

export interface UserProfileQueryRequest {
  userId: string;
  query: UserProfilesQuery | undefined;
}

export interface UpdateUserProfileRequest {
  userId: string;
  userName: string;
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  country: string;
  city: string;
  aboutMe: string;
}

export interface CreateUserProfileRequest {
  userId: string;
  userName: string;
  email: string;
}

export interface SubscribeProfileRequest {
  userId: string;
  profileUserId: string;
}

export interface DeleteProfileGQLRequest {
  userId: string;
}

export interface BanProfileGQLRequest {
  userId: string;
}

export interface UserProfilesResponse {
  items: UserProfileResponse[];
  pageNumber: number;
  pageSize: number;
  totalCount: number;
}

export interface UserProfileResponse {
  id: string;
  userId: string;
  userName: string;
  /** Обёртка для пустых значений */
  photoUrl:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  firstName:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  lastName:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  dateOfBirth:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  country:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  city:
    | string
    | undefined;
  /** Обёртка для пустых значений */
  aboutMe: string | undefined;
  followed: boolean;
  subscribers: number;
  subscriptions: number;
  createdAt: string;
  paymentAccount: boolean;
}

export interface UserProfilesGQLResponse {
  profiles: UserProfileResponse[];
}

export interface UpdateUserProfileResponse {
  status: string;
}

export interface SubscribeUserProfileResponse {
  status: string;
}

export interface CreateUserProfileResponse {
  status: string;
}

export interface UserProfileUpdateSubscribeResponse {
  status: string;
}

export interface DeleteProfileGQLResponse {
  status: string;
}

export interface BanProfileGQLResponse {
  status: string;
}

export const PROFILE_PACKAGE_NAME = "profile";

export interface ProfileServiceClient {
  getUserProfile(request: UserProfileRequest, metadata?: Metadata): Observable<UserProfileResponse>;

  getUserProfiles(request: UserProfileQueryRequest, metadata?: Metadata): Observable<UserProfilesResponse>;

  updateUserProfile(request: UpdateUserProfileRequest, metadata?: Metadata): Observable<UpdateUserProfileResponse>;

  subscribeUserProfile(request: SubscribeProfileRequest, metadata?: Metadata): Observable<SubscribeUserProfileResponse>;

  createUserProfile(request: CreateUserProfileRequest, metadata?: Metadata): Observable<CreateUserProfileResponse>;

  updateUserProfileSubscribe(
    request: UserProfileUpdateSubscribeRequest,
    metadata?: Metadata,
  ): Observable<UserProfileUpdateSubscribeResponse>;

  getUserProfilesGql(request: UserProfilesGQLRequest, metadata?: Metadata): Observable<UserProfilesGQLResponse>;

  deleteProfilesGql(request: DeleteProfileGQLRequest, metadata?: Metadata): Observable<DeleteProfileGQLResponse>;

  banProfileGql(request: BanProfileGQLRequest, metadata?: Metadata): Observable<BanProfileGQLResponse>;
}

export interface ProfileServiceController {
  getUserProfile(
    request: UserProfileRequest,
    metadata?: Metadata,
  ): Promise<UserProfileResponse> | Observable<UserProfileResponse> | UserProfileResponse;

  getUserProfiles(
    request: UserProfileQueryRequest,
    metadata?: Metadata,
  ): Promise<UserProfilesResponse> | Observable<UserProfilesResponse> | UserProfilesResponse;

  updateUserProfile(
    request: UpdateUserProfileRequest,
    metadata?: Metadata,
  ): Promise<UpdateUserProfileResponse> | Observable<UpdateUserProfileResponse> | UpdateUserProfileResponse;

  subscribeUserProfile(
    request: SubscribeProfileRequest,
    metadata?: Metadata,
  ): Promise<SubscribeUserProfileResponse> | Observable<SubscribeUserProfileResponse> | SubscribeUserProfileResponse;

  createUserProfile(
    request: CreateUserProfileRequest,
    metadata?: Metadata,
  ): Promise<CreateUserProfileResponse> | Observable<CreateUserProfileResponse> | CreateUserProfileResponse;

  updateUserProfileSubscribe(
    request: UserProfileUpdateSubscribeRequest,
    metadata?: Metadata,
  ):
    | Promise<UserProfileUpdateSubscribeResponse>
    | Observable<UserProfileUpdateSubscribeResponse>
    | UserProfileUpdateSubscribeResponse;

  getUserProfilesGql(
    request: UserProfilesGQLRequest,
    metadata?: Metadata,
  ): Promise<UserProfilesGQLResponse> | Observable<UserProfilesGQLResponse> | UserProfilesGQLResponse;

  deleteProfilesGql(
    request: DeleteProfileGQLRequest,
    metadata?: Metadata,
  ): Promise<DeleteProfileGQLResponse> | Observable<DeleteProfileGQLResponse> | DeleteProfileGQLResponse;

  banProfileGql(
    request: BanProfileGQLRequest,
    metadata?: Metadata,
  ): Promise<BanProfileGQLResponse> | Observable<BanProfileGQLResponse> | BanProfileGQLResponse;
}

export function ProfileServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getUserProfile",
      "getUserProfiles",
      "updateUserProfile",
      "subscribeUserProfile",
      "createUserProfile",
      "updateUserProfileSubscribe",
      "getUserProfilesGql",
      "deleteProfilesGql",
      "banProfileGql",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProfileService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProfileService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROFILE_SERVICE_NAME = "ProfileService";
