// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: files.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "files";

/** import "google/protobuf/wrappers.proto"; */
export interface FileChunk {
  chunkData: Uint8Array;
  filename: string;
  userId: string;
  postId: string;
}

export interface UploadResponse {
  success: boolean;
  message: string;
}

export interface LoadOnS3Request {
  userId: string;
  postId: string;
}

export interface LoadOnS3Response {
  success: boolean;
  message: string;
}

export interface ProfileFileChunk {
  chunkData: Uint8Array;
  /** Только в первом сообщении */
  filename: string;
  /** Только в первом сообщении */
  userId: string;
  /** Только в первом сообщении */
  mimetype: string;
  /** Только в первом сообщении */
  size: number;
}

export interface ProfileUploadResponse {
  success: boolean;
  message: string;
}

export const FILES_PACKAGE_NAME = "files";

export interface FileServiceClient {
  upload(request: Observable<FileChunk>, metadata?: Metadata): Observable<UploadResponse>;

  uploadProfile(request: Observable<ProfileFileChunk>, metadata?: Metadata): Observable<ProfileUploadResponse>;

  loadOnS3(request: LoadOnS3Request, metadata?: Metadata): Observable<LoadOnS3Response>;
}

export interface FileServiceController {
  upload(
    request: Observable<FileChunk>,
    metadata?: Metadata,
  ): Promise<UploadResponse> | Observable<UploadResponse> | UploadResponse;

  uploadProfile(
    request: Observable<ProfileFileChunk>,
    metadata?: Metadata,
  ): Promise<ProfileUploadResponse> | Observable<ProfileUploadResponse> | ProfileUploadResponse;

  loadOnS3(
    request: LoadOnS3Request,
    metadata?: Metadata,
  ): Promise<LoadOnS3Response> | Observable<LoadOnS3Response> | LoadOnS3Response;
}

export function FileServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["loadOnS3"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("FileService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["upload", "uploadProfile"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("FileService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const FILE_SERVICE_NAME = "FileService";
