datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "./generated"
  // binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  email     String   @unique
  name      String?
  confirmationCode String?
  codeExpiration DateTime?
  isConfirmed Boolean @default(false)
  recoveryCode String?
  passwordHash String?
  expirationDate DateTime?
  posts     Post[] @relation("UserPost")
  providers  Provider? @relation("UserProvider")
  devices  Device[] @relation("UserDevice")
  payments  Payment[] @relation("UserPayment")
  @@map("users")
}

model Provider {
  id        String   @id @default(uuid())
  user      User     @relation("UserProvider", fields: [userId], references: [id])
  userId    String   @unique
  googleId String?
  githubId String?
  @@map("providers")
}

model Device {
  id        String   @id @default(uuid())
  user      User     @relation("UserDevice", fields: [userId], references: [id])
  userId    String   
  title String?
  ip String?
  updatedAt DateTime @updatedAt
  @@map("devices")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  published Boolean  @default(false)
  title     String   @db.VarChar(255)
  author    User?    @relation("UserPost", fields: [authorId], references: [id])
  authorId  String?
  photoUploadStatus PhotoUploadStatus   @default(PENDING)  // Статус загрузки фотографий
  @@map("posts")
}

model Payment {
  id              String    @id @default(uuid())
  user            User      @relation("UserPayment", fields: [userId], references: [id])
  userId          String    @db.VarChar(40)
  subscriptionId  String?   @db.VarChar(40)
  customerId      String    @db.VarChar(40)
  payType         String?   @db.VarChar(40) @default("Stripe")
  subType         String?   @db.VarChar(40)
  amount          Int?       
  createdAt       DateTime
  expiresAt       DateTime? 
  deletedAt       DateTime?

  @@map("payments")
  @@index([userId])
}

enum PhotoUploadStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
