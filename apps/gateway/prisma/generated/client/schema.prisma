datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
  // binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model User {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  email            String         @unique
  name             String?
  confirmationCode String?
  codeExpiration   DateTime?
  isConfirmed      Boolean        @default(false)
  recoveryCode     String?
  passwordHash     String?
  expirationDate   DateTime?
  banned           Boolean        @default(false)
  bannedReason     String?
  providers        Provider?      @relation("UserProvider")
  devices          Device[]       @relation("UserDevice")
  notifications    Notification[] @relation("UserNotification")

  @@map("users")
}

model Provider {
  id       String  @id @default(uuid())
  user     User    @relation("UserProvider", fields: [userId], references: [id])
  userId   String  @unique
  googleId String?
  githubId String?

  @@map("providers")
}

model Device {
  id        String   @id @default(uuid())
  user      User     @relation("UserDevice", fields: [userId], references: [id])
  userId    String
  title     String?
  ip        String?
  updatedAt DateTime @updatedAt

  @@map("devices")
}

model Notification {
  id        String       @id @default(uuid())
  user      User         @relation("UserNotification", fields: [userId], references: [id])
  userId    String       @db.VarChar(40)
  createdAt DateTime     @default(now())
  expiresAt DateTime?
  type      NotifyStatus

  @@index([userId])
  @@map("notifications")
}

enum PhotoUploadStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum PaymentStatus {
  CANCEL
  PENDING
  ACTIVE
}

enum NotifyStatus {
  subscribe
  PENDING
  ACTIVE
}
