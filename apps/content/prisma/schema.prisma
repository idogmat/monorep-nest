// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("CONTENT_DB_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/content-client"
    binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]

}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  published Boolean  @default(false)
  title     String   @db.VarChar(255)
  userId    String
  banned    Boolean  @default(false)
  urls File[] @relation("PostFile")
  photoUploadStatus PhotoUploadStatus   @default(PENDING)  // Статус загрузки фотографий
  comments Comment[] @relation("PostComment")
  likes Like[] @relation("PostLike")
  @@map("posts")
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  fileName  String   @db.VarChar(255)
  fileUrl   String   @db.VarChar(900)
  post      Post @relation("PostFile", fields: [postId], references: [id])
  postId    String

  @@map("files")
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  message   String
  post      Post @relation("PostComment", fields: [postId], references: [id])
  postId    String
  userId    String
  @@map("comments")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  post      Post @relation("PostLike", fields: [postId], references: [id])
  postId    String
  userId    String
  @@map("likes")
}
enum PhotoUploadStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}